#Goal:
#	CompilationUnit

# Productions from §3 (Lexical Structure)
Literal:
	'int_literal'
	'long_literal'
	'float_literal'
	'double_literal'
	'true'
	'false'
	'character_literal'
	'string_literal'
	'null'

# Productions from §4 (Types, Values, and Variables)
Type:
	PrimitiveType
	ReferenceType

PrimitiveType:
	Annotation* NumericType
	Annotation* 'boolean'

NumericType:
	'byte'
 	'short'
	'int'
	'long'
	'char'
	'float'
	'double'

ReferenceType:
	ClassType
 	ArrayType

ClassType:
	SimpleClassType
	ClassType '.' SimpleClassType

SimpleClassType:
	Annotation* 'identifier' TypeArguments?

ArrayType:
	PrimitiveType Dims
	ClassType Dims

Dims:
	OneDim
	Dims OneDim

OneDim:
	Annotation* '[' ']'

TypeParameter:
	Annotation* 'identifier' TypeBound?

TypeBound:
	'extends' ClassType AdditionalBound*

AdditionalBound:
	'&' ClassType

TypeArguments:
	'<' TypeArgumentList '>'

TypeArgumentList:
	TypeArgument (',' TypeArgument)*

TypeArgument:
	ReferenceType
	Wildcard

Wildcard:
	Annotation* '?' WildcardBounds?

WildcardBounds:
	'extends' ReferenceType
	'super' ReferenceType

# Productions from §6 Names
DottedName:
	'identifier'
	DottedName '.' 'identifier'

# Productions from §7 (Packages)
CompilationUnit:
	PackageDeclaration? ImportDeclaration* TypeDeclaration*

PackageDeclaration:
	Annotation* 'package' DottedName ';'

ImportDeclaration:
	SingleTypeImportDeclaration
	TypeImportOnDemandDeclaration
	SingleStaticImportDeclaration
	StaticImportOnDemandDeclaration

SingleTypeImportDeclaration:
	'import' DottedName ';'

TypeImportOnDemandDeclaration:
	'import' DottedName '.' '*' ';'

SingleStaticImportDeclaration:
	'import' 'static' DottedName '.' 'identifier' ';'

StaticImportOnDemandDeclaration:
	'import' 'static' DottedName '.' '*' ';'

TypeDeclaration:
	ClassDeclaration
	InterfaceDeclaration
	';'

# Productions from §8 (Classes)
ClassDeclaration:
	NormalClassDeclaration
	EnumDeclaration

NormalClassDeclaration:
	ClassModifier* 'class' 'identifier' TypeParameters? Superclass? Superinterfaces? ClassBody

ClassModifier:
	Annotation
	'public'
	'protected'
	'private'
	'abstract'
	'static'
	'final'
	'strictfp'

TypeParameters:
	'<' TypeParameter (',' TypeParameter)* '>'

Superclass:
	'extends' ClassType

Superinterfaces:
	'implements' InterfaceTypeList

InterfaceTypeList:
	ClassType (',' ClassType)*

ClassBody:
	'{' ClassBodyDeclaration* '}'

ClassBodyDeclaration:
	ClassMemberDeclaration
	InstanceInitializer
	StaticInitializer
	ConstructorDeclaration

ClassMemberDeclaration:
	FieldDeclaration
	MethodDeclaration
	ClassDeclaration
	InterfaceDeclaration
	';'

FieldDeclaration:
	FieldModifier* UnannType VariableDeclaratorList ';'

FieldModifier:
	Annotation
	'public'
	'protected'
	'private'
	'static'
	'final'
	'transient'
	'volatile'

VariableDeclaratorList:
	VariableDeclarator (',' VariableDeclarator)*

VariableDeclarator:
	VariableDeclaratorId ('=' VariableInitializer)?

VariableDeclaratorId:
	'identifier' Dims?

VariableInitializer:
	Expression
	ArrayInitializer

# Inlined unann types a lot
UnannType:
	UnannPrimitiveType
	UnannReferenceType

UnannPrimitiveType:
	NumericType
	'boolean'

UnannReferenceType:
	UnannClassType
	UnannArrayType

UnannClassType:
	'identifier' TypeArguments?
	UnannClassType '.' SimpleClassType

UnannArrayType:
	UnannPrimitiveType Dims
	UnannClassType Dims

MethodDeclaration:
	MethodModifier* MethodHeader MethodBody

MethodModifier:
	Annotation
	'public'
	'protected'
	'private'
	'abstract'
	'static'
	'final'
	'synchronized'
	'native'
	'strictfp'

MethodHeader:
	UntypedMethodHeader
	TypeParameters Annotation* UntypedMethodHeader

UntypedMethodHeader:
	Result MethodDeclarator Throws?

Result:
	UnannType
	'void'

MethodDeclarator:
	'identifier' '(' FormalParameterList? ')' Dims?

FormalParameterList:
	NormalFormalParameterList
	ReceiverParameter (',' NormalFormalParameterList)?

NormalFormalParameterList:
	(FormalParameter ',')* LastFormalParameter

FormalParameter:
	VariableModifier* UnannType VariableDeclaratorId

VariableModifier:
	Annotation
	'final'

LastFormalParameter:
	VariableModifier* UnannType Annotation* '...' VariableDeclaratorId
	FormalParameter

ReceiverParameter:
	Annotation* UnannType ('identifier' '.')? 'this'

Throws:
	'throws' ClassType (',' ClassType)*

MethodBody:
	Block
	';'

InstanceInitializer:
	Block

StaticInitializer:
	'static' Block

ConstructorDeclaration:
	ConstructorModifier* ConstructorDeclarator Throws? ConstructorBody

ConstructorModifier:
	Annotation
	'public'
	'protected'
	'private'

ConstructorDeclarator:
	TypeParameters? 'identifier' '(' FormalParameterList? ')'

ConstructorBody:
	'{' ExplicitConstructorInvocation? BlockStatements? '}'

ExplicitConstructorInvocation:
	TypeArguments? 'this' ConstructorArguments
	TypeArguments? 'super' ConstructorArguments
	DottedName '.' TypeArguments? 'super' ConstructorArguments
	Primary '.' TypeArguments? 'super' ConstructorArguments

ConstructorArguments:
	'(' ArgumentList? ')' ';'

EnumDeclaration:
	ClassModifier* 'enum' 'identifier' Superinterfaces? EnumBody

EnumBody:
	'{' EnumConstantList? ','? EnumBodyDeclarations? '}'

EnumConstantList:
	EnumConstant (',' EnumConstant)*

EnumConstant:
	Annotation* 'identifier' ('(' ArgumentList? ')')? ClassBody?

EnumBodyDeclarations:
	';' ClassBodyDeclaration*

# Productions from §9 (Interfaces)
InterfaceDeclaration:
	NormalInterfaceDeclaration
	AnnotationTypeDeclaration

NormalInterfaceDeclaration:
	InterfaceModifier* 'interface' 'identifier' TypeParameters? ExtendsInterfaces? InterfaceBody

InterfaceModifier:
	Annotation
	'public'
	'protected'
	'private'
	'abstract'
	'static'
	'strictfp'

ExtendsInterfaces:
	'extends' InterfaceTypeList

InterfaceBody:
	'{' InterfaceMemberDeclaration* '}'

InterfaceMemberDeclaration:
	ConstantDeclaration
	InterfaceMethodDeclaration
	ClassDeclaration
	InterfaceDeclaration
	';'

ConstantDeclaration:
	ConstantModifier* UnannType VariableDeclaratorList ';'

ConstantModifier:
	Annotation
	'public'
	'static'
	'final'

InterfaceMethodDeclaration:
	InterfaceMethodModifier* MethodHeader MethodBody

InterfaceMethodModifier:
	Annotation
	'public'
	'abstract'
	'default'
	'static'
	'strictfp'

AnnotationTypeDeclaration:
	InterfaceModifier* '@' 'interface' 'identifier' AnnotationTypeBody

AnnotationTypeBody:
	'{' AnnotationTypeMemberDeclaration* '}'

AnnotationTypeMemberDeclaration:
	AnnotationTypeElementDeclaration
	ConstantDeclaration
	ClassDeclaration
	InterfaceDeclaration
	';'

AnnotationTypeElementDeclaration:
	AnnotationTypeElementModifier* UnannType 'identifier' '(' ')' Dims? DefaultValue? ';'

AnnotationTypeElementModifier:
	Annotation
	'public'
	'abstract'

DefaultValue:
	'default' ElementValue

Annotation:
	NormalAnnotation
	MarkerAnnotation
	SingleElementAnnotation

NormalAnnotation:
	'@' DottedName '(' ElementValuePairList? ')'

ElementValuePairList:
	ElementValuePair (',' ElementValuePair)*

ElementValuePair:
	'identifier' '=' ElementValue

ElementValue:
	ConditionalExpression
	ElementValueArrayInitializer
	Annotation

ElementValueArrayInitializer:
	'{' ElementValueList? ','? '}'

ElementValueList:
	ElementValue (',' ElementValue)*

MarkerAnnotation:
	'@' DottedName

SingleElementAnnotation:
	'@' DottedName '(' ElementValue ')'

# Productions from §10 (Arrays)
ArrayInitializer:
	'{' VariableInitializerList? ','? '}'

VariableInitializerList:
	VariableInitializer (',' VariableInitializer)*

# Productions from §14 (Blocks and Statements)
Block:
	'{' BlockStatements? '}'

BlockStatements:
	BlockStatement BlockStatement*

BlockStatement:
	LocalVariableDeclarationStatement
	ClassDeclaration
	Statement

LocalVariableDeclarationStatement:
	LocalVariableDeclaration ';'

LocalVariableDeclaration:
	VariableModifier* UnannType VariableDeclaratorList

Statement:
	StatementWithoutTrailingSubstatement
	LabeledStatement
	IfThenStatement
	IfThenElseStatement
	WhileStatement
	ForStatement

StatementNoShortIf:
	StatementWithoutTrailingSubstatement
	LabeledStatementNoShortIf
	IfThenElseStatementNoShortIf
	WhileStatementNoShortIf
	ForStatementNoShortIf

StatementWithoutTrailingSubstatement:
	Block
	EmptyStatement
	ExpressionStatement
	AssertStatement
	SwitchStatement
	DoStatement
	BreakStatement
	ContinueStatement
	ReturnStatement
	SynchronizedStatement
	ThrowStatement
	TryStatement

EmptyStatement:
	';'

LabeledStatement:
	'identifier' ':' Statement

LabeledStatementNoShortIf:
	'identifier' ':' StatementNoShortIf

ExpressionStatement:
	StatementExpression ';'

StatementExpression:
	Assignment
	PreIncrementExpression
	PreDecrementExpression
	PostIncrementExpression
	PostDecrementExpression
	MethodInvocation
	ClassInstanceCreationExpression

IfThenStatement:
	'if' '(' Expression ')' Statement

IfThenElseStatement:
	'if' '(' Expression ')' StatementNoShortIf 'else' Statement

IfThenElseStatementNoShortIf:
	'if' '(' Expression ')' StatementNoShortIf 'else' StatementNoShortIf

AssertStatement:
	'assert' Expression ';'
	'assert' Expression ':' Expression ';'

SwitchStatement:
	'switch' '(' Expression ')' SwitchBlock

SwitchBlock:
	'{' SwitchBlockStatementGroup* SwitchLabel* '}'

SwitchBlockStatementGroup:
	SwitchLabel SwitchLabel* BlockStatements

SwitchLabel:
	'case' ConstantExpression ':'
	'default' ':'

WhileStatement:
	'while' '(' Expression ')' Statement

WhileStatementNoShortIf:
	'while' '(' Expression ')' StatementNoShortIf

DoStatement:
	'do' Statement 'while' '(' Expression ')' ';'

ForStatement:
	BasicForStatement
	EnhancedForStatement

ForStatementNoShortIf:
	BasicForStatementNoShortIf
	EnhancedForStatementNoShortIf

BasicForStatement:
	'for' '(' ForInit? ';' Expression? ';' ForUpdate? ')' Statement

BasicForStatementNoShortIf:
	'for' '(' ForInit? ';' Expression? ';' ForUpdate? ')' StatementNoShortIf

ForInit:
	StatementExpressionList
	LocalVariableDeclaration

ForUpdate:
	StatementExpressionList

StatementExpressionList:
	StatementExpression (',' StatementExpression)*

EnhancedForStatement:
	'for' '(' VariableModifier* UnannType VariableDeclaratorId ':' Expression ')' Statement

EnhancedForStatementNoShortIf:
	'for' '(' VariableModifier* UnannType VariableDeclaratorId ':' Expression ')' StatementNoShortIf

BreakStatement:
	'break' 'identifier'? ';'

ContinueStatement:
	'continue' 'identifier'? ';'

ReturnStatement:
	'return' Expression? ';'

ThrowStatement:
	'throw' Expression ';'

SynchronizedStatement:
	'synchronized' '(' Expression ')' Block

TryStatement:
	'try' Block Catches
	'try' Block Catches? Finally
	'try' '(' ResourceList ';'? ')' Block Catches? Finally?

Catches:
	CatchClause CatchClause*

CatchClause:
	'catch' '(' CatchFormalParameter ')' Block

CatchFormalParameter:
	VariableModifier* CatchType VariableDeclaratorId

CatchType:
	UnannClassType ExtraCatchType*

ExtraCatchType:
	'|' ClassType

Finally:
	'finally' Block

ResourceList:
	Resource (';' Resource)*

Resource:
	VariableModifier* UnannType VariableDeclaratorId '=' Expression

# Productions from §15 (Expressions)
Primary:
	PrimaryNoNewArray
	ArrayCreationExpression

PrimaryNoNewArray:
	Literal
	DottedName ('[' ']')* '.' 'class'
	UnannPrimitiveType ('[' ']')* '.' 'class'
	'void' '.' 'class'
	'this'
	DottedName '.' 'this'
	'(' Expression ')'
	ClassInstanceCreationExpression
	FieldAccess
	ArrayAccess
	MethodInvocation
	MethodReference

ClassInstanceCreationExpression:
	UntypedClassInstanceCreationExpression
	DottedName '.' UntypedClassInstanceCreationExpression
	Primary '.' UntypedClassInstanceCreationExpression

UntypedClassInstanceCreationExpression:
	'new' TypeArguments? Annotation* ClassInstanceName TypeArgumentsOrDiamond? '(' ArgumentList? ')' ClassBody?

ClassInstanceName:
	'identifier'
	'identifier' ExtraName*

ExtraName:
	'.' Annotation* 'identifier'

TypeArgumentsOrDiamond:
	TypeArguments
	Diamond

Diamond:
	'<' '>'

FieldAccess:
	Primary '.' 'identifier'
	'super' '.' 'identifier'
	DottedName '.' 'super' '.' 'identifier'

ArrayAccess:
	DottedName '[' Expression ']'
	PrimaryNoNewArray '[' Expression ']'

MethodInvocation:
	UntypedMethodInvocation
	DottedName '.' TypeArguments? UntypedMethodInvocation
 	Primary '.' TypeArguments? UntypedMethodInvocation
	'super' '.' TypeArguments? UntypedMethodInvocation
	DottedName '.' 'super' '.' TypeArguments? UntypedMethodInvocation

UntypedMethodInvocation:
	'identifier' '(' ArgumentList? ')'

ArgumentList:
	Expression (',' Expression)*

MethodReference:
	ReferenceType '::' TypeArguments? 'identifier'
	Primary '::' TypeArguments? 'identifier'
	'super' '::' TypeArguments? 'identifier'
	DottedName '.' 'super' '::' TypeArguments? 'identifier'
	ClassType '::' TypeArguments? 'new'
	ArrayType '::' 'new'

ArrayCreationExpression:
	'new' PrimitiveType DimExprs Dims?
	'new' ClassType DimExprs Dims?
 	'new' PrimitiveType Dims ArrayInitializer
	'new' ClassType Dims ArrayInitializer

DimExprs:
	DimExpr DimExpr*

DimExpr:
	Annotation* '[' Expression ']'

ConstantExpression:
	Expression

Expression:
	LambdaExpression
	AssignmentExpression

LambdaExpression:
	LambdaParameters '->' LambdaBody

LambdaParameters:
	'identifier'
	'(' FormalParameterList? ')'
	'(' InferredFormalParameterList ')'

InferredFormalParameterList:
	'identifier' (',' 'identifier')*

LambdaBody:
	Expression
	Block

AssignmentExpression:
	ConditionalExpression
	Assignment

Assignment:
	LeftHandSide AssignmentOperator Expression

LeftHandSide:
	DottedName
	FieldAccess
	ArrayAccess

AssignmentOperator:
	'='
 	'*='
 	'/='
 	'%='
 	'+='
 	'-='
 	'<<='
 	'>>='
 	'>>>='
 	'&='
 	'^='
 	'|='

ConditionalExpression:
	ConditionalOrExpression
	ConditionalOrExpression '?' Expression ':' ConditionalExpression

ConditionalOrExpression:
	ConditionalAndExpression
	ConditionalOrExpression '||' ConditionalAndExpression

ConditionalAndExpression:
	InclusiveOrExpression
	ConditionalAndExpression '&&' InclusiveOrExpression

InclusiveOrExpression:
	ExclusiveOrExpression
	InclusiveOrExpression '|' ExclusiveOrExpression

ExclusiveOrExpression:
	AndExpression
	ExclusiveOrExpression '^' AndExpression

AndExpression:
	EqualityExpression
	AndExpression '&' EqualityExpression

EqualityExpression:
	RelationalExpression
	EqualityExpression EqualOp RelationalExpression

EqualOp:
	'=='
	'!='

RelationalExpression:
	ShiftExpression
	RelationalExpression RelationalOp ShiftExpression
	RelationalExpression 'instanceof' ReferenceType

RelationalOp:
	'<'
	'>'
	'<='
	'>='

ShiftExpression:
	AdditiveExpression
	ShiftExpression ShiftOp AdditiveExpression

ShiftOp:
	'<<'
	'>' '>'
	'>' '>' '>'

AdditiveExpression:
	MultiplicativeExpression
	AdditiveExpression AdditiveOp MultiplicativeExpression

AdditiveOp:
	'+'
	'-'

MultiplicativeExpression:
	UnaryExpression
	MultiplicativeExpression MultiplicativeOp UnaryExpression

MultiplicativeOp:
	'*'
	'/'
	'%'

UnaryExpression:
	PreIncrementExpression
	PreDecrementExpression
	'+' UnaryExpression
	'-' UnaryExpression
	UnaryExpressionNotPlusMinus

PreIncrementExpression:
	'++' UnaryExpression

PreDecrementExpression:
	'--' UnaryExpression

UnaryExpressionNotPlusMinus:
	PostfixExpression
	'~' UnaryExpression
	'!' UnaryExpression
	CastExpression

PostfixExpression:
	Primary
	DottedName
	PostIncrementExpression
	PostDecrementExpression

PostIncrementExpression:
	PostfixExpression '++'

PostDecrementExpression:
	PostfixExpression '--'

CastExpression:
	'(' PrimitiveType ')' UnaryExpression
	'(' ReferenceType AdditionalBound* ')' UnaryExpressionNotPlusMinus
	'(' ReferenceType AdditionalBound* ')' LambdaExpression
