#Goal:
#	CompilationUnit

# Productions from §3 (Lexical Structure)
Literal:
	'int_literal'
	'long_literal'
	'float_literal'
	'double_literal'
	'true'
	'false'
	'character_literal'
	'string_literal'
	'null'

# Productions from §4 (Types, Values, and Variables)
Type:
	PrimitiveType
	ReferenceType

PrimitiveType:
	Annotation* NumericType
	Annotation* 'boolean'

NumericType:
	'byte'
 	'short'
	'int'
	'long'
	'char'
	'float'
	'double'

ReferenceType:
	ClassOrInterfaceType
	TypeVariable
 	ArrayType

ClassOrInterfaceType:
	ClassType
	InterfaceType

ClassType:
	Annotation* 'identifier' TypeArguments?
	ClassOrInterfaceType '.' Annotation* 'identifier' TypeArguments?

InterfaceType:
	ClassType

TypeVariable:
	Annotation* 'identifier'

ArrayType:
	PrimitiveType Dims
	ClassOrInterfaceType Dims
	TypeVariable Dims

Dims:
	Annotation* '[' ']' (Annotation* '[' ']')*

TypeParameter:
	TypeParameterModifier* 'identifier' TypeBound?

TypeParameterModifier:
	Annotation

TypeBound:
	'extends' TypeVariable
	'extends' ClassOrInterfaceType AdditionalBound*

AdditionalBound:
	'&' InterfaceType

TypeArguments:
	'<' TypeArgumentList '>'

TypeArgumentList:
	TypeArgument (',' TypeArgument)*

TypeArgument:
	ReferenceType
	Wildcard

Wildcard:
	Annotation* '?' WildcardBounds?

WildcardBounds:
	'extends' ReferenceType
	'super' ReferenceType

# Productions from §6 Names
PackageName:
	'identifier'
	PackageName '.' 'identifier'

TypeName:
	'identifier'
	PackageOrTypeName '.' 'identifier'

PackageOrTypeName:
	'identifier'
	PackageOrTypeName '.' 'identifier'

ExpressionName:
	'identifier'
	AmbigousName '.' 'identifier'

MethodName:
	'identifier'

AmbigousName:
	'identifier'
	AmbigousName '.' 'identifier'

# Productions from §7 (Packages)
CompilationUnit:
	PackageDeclaration? ImportDeclaration* TypeDeclaration*

PackageDeclaration:
	PackageModifier* 'package' 'identifier' ('.' 'identifier')* ';'

PackageModifier:
	Annotation

ImportDeclaration:
	SingleTypeImportDeclaration
	TypeImportOnDemandDeclaration
	SingleStaticImportDeclaration
	StaticImportOnDemandDeclaration

SingleTypeImportDeclaration:
	'import' TypeName ';'

TypeImportOnDemandDeclaration:
	'import' PackageOrTypeName '.' '*' ';'

SingleStaticImportDeclaration:
	'import' 'static' TypeName '.' 'identifier' ';'

StaticImportOnDemandDeclaration:
	'import' 'static' TypeName '.' '*' ';'

TypeDeclaration:
	ClassDeclaration
	InterfaceDeclaration
	';'

# Productions from §8 (Classes)
ClassDeclaration:
	NormalClassDeclaration
	EnumDeclaration

NormalClassDeclaration:
	ClassModifier* 'class' 'identifier' TypeParameters? Superclass? Superinterfaces? ClassBody

ClassModifier:
	Annotation
	'public'
	'protected'
	'private'
	'abstract'
	'static'
	'final'
	'strictfp'

TypeParameters:
	'<' TypeParameterList '>'

TypeParameterList:
	TypeParameter (',' TypeParameter)*

Superclass:
	'extends' ClassType

Superinterfaces:
	'implements' InterfaceTypeList

InterfaceTypeList:
	InterfaceType (',' ClassType)*

ClassBody:
	'{' ClassBodyDeclaration* '}'

ClassBodyDeclaration:
	ClassMemberDeclaration
	InstanceInitializer
	StaticInitializer
	ConstructorDeclaration

ClassMemberDeclaration:
	FieldDeclaration
	MethodDeclaration
	ClassDeclaration
	InterfaceDeclaration
	';'

FieldDeclaration:
	FieldModifier* UnannType VariableDeclaratorList ';'

FieldModifier:
	Annotation
	'public'
	'protected'
	'private'
	'static'
	'final'
	'transient'
	'volatile'

VariableDeclaratorList:
	VariableDeclarator (',' VariableDeclarator)*

VariableDeclarator:
	VariableDeclaratorId ('=' VariableInitializer)?

VariableDeclaratorId:
	'identifier' Dims?

VariableInitializer:
	Expression
	ArrayInitializer

# Inlined unann types a lot
UnannType:
	UnannPrimitiveType
	UnannReferenceType

UnannPrimitiveType:
	NumericType
	'boolean'

UnannReferenceType:
	UnannClassOrInterfaceType
	UnannTypeVariable
	UnannArrayType

UnannClassOrInterfaceType:
	UnannClassType
	UnannInterfaceType

UnannClassType:
	'identifier' TypeArguments?
	UnannClassOrInterfaceType '.' Annotation* 'identifier' TypeArguments?

UnannInterfaceType:
	UnannClassType

UnannTypeVariable:
	'identifier'

UnannArrayType:
	UnannPrimitiveType Dims
	UnannClassOrInterfaceType Dims
	UnannTypeVariable Dims

MethodDeclaration:
	MethodModifier* MethodHeader MethodBody

MethodModifier:
	Annotation
	'public'
	'protected'
	'private'
	'abstract'
	'static'
	'final'
	'synchronized'
	'native'
	'strictfp'

MethodHeader:
	Result MethodDeclarator Throws?
	TypeParameters Annotation* Result MethodDeclarator Throws?

Result:
	UnannType
	'void'

MethodDeclarator:
	'identifier' '(' FormalParameterList? ')' Dims?

FormalParameterList:
	ReceiverParameter FormalParameterListRest
	FormalParameter FormalParameterListRest
	LastFormalParameter

FormalParameter:
	VariableModifier* UnannType VariableDeclaratorId

VariableModifier:
	Annotation
	'final'

LastFormalParameter:
	VariableModifier* UnannType Annotation* '...' VariableDeclaratorId

ReceiverParameter:
	Annotation* UnannType ('identifier' '.')? 'this'

FormalParameterListRest:
	(',' FormalParameter)* (',' LastFormalParameter)?

Throws:
	'throws' ExceptionTypeList

ExceptionTypeList:
	ExceptionType (',' ExceptionType)*

ExceptionType:
	ClassType
	TypeVariable

MethodBody:
	Block
	';'

InstanceInitializer:
	Block

StaticInitializer:
	'static' Block

ConstructorDeclaration:
	ConstructorModifier* ConstructorDeclarator Throws? ConstructorBody

ConstructorModifier:
	Annotation
	'public'
	'protected'
	'private'

ConstructorDeclarator:
	TypeParameters? 'identifier' '(' FormalParameterList? ')'

ConstructorBody:
	'{' ExplicitConstructorInvocation? BlockStatements? '}'

ExplicitConstructorInvocation:
	TypeArguments? 'this' '(' ArgumentList? ')' ';'
	TypeArguments? 'super' '(' ArgumentList? ')' ';'
	ExpressionName '.' TypeArguments? 'super' '(' ArgumentList? ')' ';'
	Primary '.' TypeArguments? 'super' '(' ArgumentList? ')' ';'

EnumDeclaration:
	ClassModifier* 'enum' 'identifier' Superinterfaces? EnumBody

EnumBody:
	'{' EnumConstantList? ','? EnumBodyDeclarations? '}'

EnumConstantList:
	EnumConstant (',' EnumConstant)*

EnumConstant:
	Annotation* 'identifier' ('(' ArgumentList? ')')? ClassBody?

EnumBodyDeclarations:
	';' ClassBodyDeclaration*

# Productions from §9 (Interfaces)
InterfaceDeclaration:
	NormalInterfaceDeclaration
	AnnotationTypeDeclaration

NormalInterfaceDeclaration:
	InterfaceModifier* 'interface' 'identifier' TypeParameters? ExtendsInterfaces? InterfaceBody

InterfaceModifier:
	Annotation
	'public'
	'protected'
	'private'
	'abstract'
	'static'
	'strictfp'

ExtendsInterfaces:
	'extends' InterfaceTypeList

InterfaceBody:
	'{' InterfaceMemberDeclaration* '}'

InterfaceMemberDeclaration:
	ConstantDeclaration
	InterfaceMethodDeclaration
	ClassDeclaration
	InterfaceDeclaration
	';'

ConstantDeclaration:
	ConstantModifier* UnannType VariableDeclaratorList ';'

ConstantModifier:
	Annotation
	'public'
	'static'
	'final'

InterfaceMethodDeclaration:
	InterfaceMethodModifier* MethodHeader MethodBody

InterfaceMethodModifier:
	Annotation
	'public'
	'abstract'
	'default'
	'static'
	'strictfp'

AnnotationTypeDeclaration:
	InterfaceModifier* '@' 'interface' 'identifier' AnnotationTypeBody

AnnotationTypeBody:
	'{' AnnotationTypeMemberDeclaration* '}'

AnnotationTypeMemberDeclaration:
	AnnotationTypeElementDeclaration
	ConstantDeclaration
	ClassDeclaration
	InterfaceDeclaration
	';'

AnnotationTypeElementDeclaration:
	AnnotationTypeElementModifier* UnannType 'identifier' '(' ')' Dims? DefaultValue? ';'

AnnotationTypeElementModifier:
	Annotation
	'public'
	'abstract'

DefaultValue:
	'default' ElementValue

Annotation:
	NormalAnnotation
	MarkerAnnotation
	SingleElementAnnotation

NormalAnnotation:
	'@' TypeName '(' ElementValuePairList? ')'

ElementValuePairList:
	ElementValuePair (',' ElementValuePair)*

ElementValuePair:
	'identifier' '=' ElementValue

ElementValue:
	ConditionalExpression
	ElementValueArrayInitializer
	Annotation

ElementValueArrayInitializer:
	'{' ElementValueList? ','? '}'

ElementValueList:
	ElementValue (',' ElementValue)*

MarkerAnnotation:
	'@' TypeName

SingleElementAnnotation:
	'@' TypeName '(' ElementValue ')'

# Productions from §10 (Arrays)
ArrayInitializer:
	'{' VariableInitializerList? ','? '}'

VariableInitializerList:
	VariableInitializer (',' VariableInitializer)*

# Productions from §14 (Blocks and Statements)
Block:
	'{' BlockStatements? '}'

BlockStatements:
	BlockStatement BlockStatement*

BlockStatement:
	LocalVariableDeclarationStatement
	ClassDeclaration
	Statement

LocalVariableDeclarationStatement:
	LocalVariableDeclaration ';'

LocalVariableDeclaration:
	VariableModifier* UnannType VariableDeclaratorList

Statement:
	StatementWithoutTrailingSubstatement
	LabeledStatement
	IfThenStatement
	IfThenElseStatement
	WhileStatement
	ForStatement

StatementNoShortIf:
	StatementWithoutTrailingSubstatement
	LabeledStatementNoShortIf
	IfThenElseStatementNoShortIf
	WhileStatementNoShortIf
	ForStatementNoShortIf

StatementWithoutTrailingSubstatement:
	Block
	EmptyStatement
	ExpressionStatement
	AssertStatement
	SwitchStatement
	DoStatement
	BreakStatement
	ContinueStatement
	ReturnStatement
	SynchronizedStatement
	ThrowStatement
	TryStatement

EmptyStatement:
	';'

LabeledStatement:
	'identifier' ':' Statement

LabeledStatementNoShortIf:
	'identifier' ':' StatementNoShortIf

ExpressionStatement:
	StatementExpression ';'

StatementExpression:
	Assignment
	PreIncrementExpression
	PreDecrementExpression
	PostIncrementExpression
	PostDecrementExpression
	MethodInvocation
	ClassInstanceCreationExpression

IfThenStatement:
	'if' '(' Expression ')' Statement

IfThenElseStatement:
	'if' '(' Expression ')' StatementNoShortIf 'else' Statement

IfThenElseStatementNoShortIf:
	'if' '(' Expression ')' StatementNoShortIf 'else' StatementNoShortIf

AssertStatement:
	'assert' Expression ';'
	'assert' Expression ':' Expression ';'

SwitchStatement:
	'switch' '(' Expression ')' SwitchBlock

SwitchBlock:
	'{' SwitchBlockStatementGroup* SwitchLabel* '}'

SwitchBlockStatementGroup:
	SwitchLabel SwitchLabel* BlockStatements

SwitchLabel:
	'case' ConstantExpression ':'
	# enum
	'case' 'identifier' ':'
	'default' ':'

WhileStatement:
	'while' '(' Expression ')' Statement

WhileStatementNoShortIf:
	'while' '(' Expression ')' StatementNoShortIf

DoStatement:
	'do' Statement 'while' '(' Expression ')' ';'

ForStatement:
	BasicForStatement
	EnhancedForStatement

ForStatementNoShortIf:
	BasicForStatementNoShortIf
	EnhancedForStatementNoShortIf

BasicForStatement:
	'for' '(' ForInit? ';' Expression? ';' ForUpdate? ')' Statement

BasicForStatementNoShortIf:
	'for' '(' ForInit? ';' Expression? ';' ForUpdate? ')' StatementNoShortIf

ForInit:
	StatementExpressionList
	LocalVariableDeclaration

ForUpdate:
	StatementExpressionList

StatementExpressionList:
	StatementExpression (',' StatementExpression)*

EnhancedForStatement:
	'for' '(' VariableModifier* UnannType VariableDeclaratorId ':' Expression ')' Statement

EnhancedForStatementNoShortIf:
	'for' '(' VariableModifier* UnannType VariableDeclaratorId ':' Expression ')' StatementNoShortIf

BreakStatement:
	'break' 'identifier'? ';'

ContinueStatement:
	'continue' 'identifier'? ';'

ReturnStatement:
	'return' Expression? ';'

ThrowStatement:
	'throw' Expression ';'

SynchronizedStatement:
	'synchronized' '(' Expression ')' Block

TryStatement:
	'try' Block Catches
	'try' Block Catches? Finally
	TryWithResourcesStatement

Catches:
	CatchClause CatchClause*

CatchClause:
	'catch' '(' CatchFormalParameter ')' Block

CatchFormalParameter:
	VariableModifier* CatchType VariableDeclaratorId

CatchType:
	UnannClassType ('|' ClassType)*

Finally:
	'finally' Block

TryWithResourcesStatement:
	'try' ResourceSpecification Block Catches? Finally?

ResourceSpecification:
	'(' ResourceList ';'? ')'

ResourceList:
	Resource (';' Resource)*

Resource:
	VariableModifier* UnannType VariableDeclaratorId '=' Expression

# Productions from §15 (Expressions)
Primary:
	PrimaryNoNewArray
	ArrayCreationExpression

PrimaryNoNewArray:
	Literal
	TypeName ('[' ']')* '.' 'class'
	'void' '.' 'class'
	'this'
	TypeName '.' 'this'
	'(' Expression ')'
	ClassInstanceCreationExpression
	FieldAccess
	ArrayAccess
	MethodInvocation
	MethodReference

ClassInstanceCreationExpression:
	'new' TypeArguments? Annotation* 'identifier' ('.' Annotation* 'identifier')* TypeArgumentsOrDiamond? '(' ArgumentList? ')' ClassBody?
	ExpressionName '.' 'new' TypeArguments? Annotation* 'identifier' ('.' Annotation* 'identifier')* TypeArgumentsOrDiamond? '(' ArgumentList? ')' ClassBody?
	Primary '.' 'new' TypeArguments? Annotation* 'identifier' ('.' Annotation* 'identifier')* TypeArgumentsOrDiamond? '(' ArgumentList? ')' ClassBody?

TypeArgumentsOrDiamond:
	TypeArguments
	'<' '>'

FieldAccess:
	Primary '.' 'identifier'
	'super' '.' 'identifier'
	TypeName '.' 'super' '.' 'identifier'

ArrayAccess:
	ExpressionName '[' Expression ']'
	PrimaryNoNewArray '[' Expression ']'


MethodInvocation:
	MethodName '(' ArgumentList? ')'
	TypeName '.' TypeArguments? 'identifier' '(' ArgumentList? ')'
	ExpressionName '.' TypeArguments? 'identifier' '(' ArgumentList? ')'
 	Primary '.' TypeArguments? 'identifier' '(' ArgumentList? ')'
	'super' '.' TypeArguments? 'identifier' '(' ArgumentList? ')'
	TypeName '.' 'super' '.' TypeArguments? 'identifier' '(' ArgumentList? ')'

ArgumentList:
	Expression (',' Expression)*

MethodReference:
	ExpressionName '::' TypeArguments? 'identifier'
	ReferenceType '::' TypeArguments? 'identifier'
	Primary '::' TypeArguments? 'identifier'
	'super' '::' TypeArguments? 'identifier'
	TypeName '.' 'super' '::' TypeArguments? 'identifier'
	ClassType '::' TypeArguments? 'new'
	ArrayType '::' 'new'

ArrayCreationExpression:
	'new' PrimitiveType DimExprs Dims?
	'new' ClassOrInterfaceType DimExprs Dims?
 	'new' PrimitiveType Dims ArrayInitializer
	'new' ClassOrInterfaceType Dims ArrayInitializer

DimExprs:
	DimExpr DimExpr*

DimExpr:
	Annotation* '[' Expression ']'

ConstantExpression:
	Expression

Expression:
	LambdaExpression
	AssignmentExpression

LambdaExpression:
	LambdaParameters '->' LambdaBody

LambdaParameters:
	'identifier'
	'(' FormalParameterList? ')'
	'(' 'identifier' (',' 'identifier')* ')'

LambdaBody:
	Expression
	Block

AssignmentExpression:
	ConditionalExpression
	Assignment

Assignment:
	LeftHandSide AssignmentOperator Expression

LeftHandSide:
	ExpressionName
	FieldAccess
	ArrayAccess

AssignmentOperator:
	'='
 	'*='
 	'/='
 	'%='
 	'+='
 	'-='
 	'<<='
 	'>>='
 	'>>>='
 	'&='
 	'^='
 	'|='

ConditionalExpression:
	ConditionalOrExpression
	ConditionalOrExpression '?' Expression ':' ConditionalExpression

ConditionalOrExpression:
	ConditionalAndExpression
	ConditionalOrExpression '||' ConditionalAndExpression

ConditionalAndExpression:
	InclusiveOrExpression
	ConditionalAndExpression '&&' InclusiveOrExpression

InclusiveOrExpression:
	ExclusiveOrExpression
	InclusiveOrExpression '|' ExclusiveOrExpression

ExclusiveOrExpression:
	AndExpression
	ExclusiveOrExpression '^' AndExpression

AndExpression:
	EqualityExpression
	AndExpression '&' EqualityExpression

EqualityExpression:
	RelationalExpression
	EqualityExpression '==' RelationalExpression
	EqualityExpression '!=' RelationalExpression

RelationalExpression:
	ShiftExpression
	RelationalExpression '<' ShiftExpression
	RelationalExpression '>' ShiftExpression
	RelationalExpression '<=' ShiftExpression
	RelationalExpression '>=' ShiftExpression
	RelationalExpression 'instanceof' ReferenceType

ShiftExpression:
	AdditiveExpression
	ShiftExpression '<<' AdditiveExpression
	ShiftExpression '>>' AdditiveExpression
	ShiftExpression '>>>' AdditiveExpression

AdditiveExpression:
	MultiplicativeExpression
	AdditiveExpression '+' MultiplicativeExpression
	AdditiveExpression '-' MultiplicativeExpression

MultiplicativeExpression:
	UnaryExpression
	MultiplicativeExpression '*' UnaryExpression
	MultiplicativeExpression '/' UnaryExpression
	MultiplicativeExpression '%' UnaryExpression

UnaryExpression:
	PreIncrementExpression
	PreDecrementExpression
	'+' UnaryExpression
	'-' UnaryExpression
	UnaryExpressionNotPlusMinus

PreIncrementExpression:
	'++' UnaryExpression

PreDecrementExpression:
	'--' UnaryExpression

UnaryExpressionNotPlusMinus:
	PostfixExpression
	'~' UnaryExpression
	'!' UnaryExpression
	CastExpression

PostfixExpression:
	Primary
	ExpressionName
	PostIncrementExpression
	PostDecrementExpression

PostIncrementExpression:
	PostfixExpression '++'

PostDecrementExpression:
	PostfixExpression '--'

CastExpression:
	'(' PrimitiveType ')' UnaryExpression
	'(' ReferenceType AdditionalBound* ')' UnaryExpressionNotPlusMinus
	'(' ReferenceType AdditionalBound* ')' LambdaExpression

